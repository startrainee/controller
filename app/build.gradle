apply plugin: 'com.android.application'

static def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.siasun.controller"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk {
            //选择要添加的对应cpu类型的.so库（不需要的删除即可）。
            //abiFilters 'armeabi', 'armeabi-v7a', 'x86', 'x86_64', 'mips', 'mips64'
            abiFilters 'armeabi', 'armeabi-v7a', 'x86'
        }
    }

    signingConfigs {
        controller {
            storeFile file(KEYSTORE_PATH)
            storePassword KEYSTORE_PASSWORD
            keyAlias KEYSTORE_KEYALIAS
            keyPassword KEY_PASSWORD
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "LOG_DEBUG", "true"
            signingConfig signingConfigs.controller
        }
        release {
            minifyEnabled true
            zipAlignEnabled true             //Zipalign优化
            shrinkResources true            //移除无用的资源文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "LOG_DEBUG", "false"

            /*manifestPlaceholders = [
                    "baidu_api_key": "Ck3u4o5EBtOLAZP8uDgwyGabl2I3RXdK"
            ]*/
//for WARNING: API 'variantOutput.getPackageApplication()
//更新前
/*            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        def fileName = "${defaultConfig.applicationId}_v${defaultConfig.versionName}_${defaultConfig.versionCode}_release.apk"
                        output.outputFileName = fileName
                    }
                }
            }
*/
            //for WARNING: API 'variantOutput.getPackageApplication()
            //更新后
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "${defaultConfig.applicationId}-${variant.versionCode}-${variant.versionName}-${releaseTime()}.apk"
                }
                signingConfig signingConfigs.controller
            }
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
    repositories {
        flatDir {
            dirs 'libs'
        }
    }

    dependencies {
        implementation fileTree(dir: 'libs', include: ['*.jar'])
        implementation 'com.android.support:appcompat-v7:28.0.0'
        implementation 'com.android.support.constraint:constraint-layout:1.1.3'
        testImplementation 'junit:junit:4.12'
        androidTestImplementation 'com.android.support.test:runner:1.0.2'
        androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
        implementation 'com.android.support:support-v4:28.0.0'

        //gson
        implementation 'com.google.code.gson:gson:2.8.2'
        //siasun工具类
        implementation(name: 'SiasunCore-1.0.7', ext: 'aar')
        //fastjson (siasun工具类 里已有)
        //implementation 'com.alibaba:fastjson:1.1.71.android'
        //okhttp
        implementation 'com.squareup.okhttp3:okhttp:3.12.1'
        //xutils view 注解
        implementation 'org.xutils:xutils:3.5.1'


    }
}
